<?php

namespace App\Actions;
use Genocide\Radiocrud\Exceptions\CustomException;
use Genocide\Radiocrud\Services\ActionService\ActionService;
use App\Models\WalletHistoryModel;
use App\Http\Resources\WalletHistoryResource;
use App\Models\StudentModel;
use App\Actions\StudentAction;

class WalletHistoryAction extends ActionService
{
    public function __construct()
    {
        $this
            ->setModel(WalletHistoryModel::class)
            ->setResource(WalletHistoryResource::class)
            ->setValidationRules([
                'store' => [
                    'amount' => ['required', 'int']
                ],
                'getQuery' => [
                    'student_id' => ['string', 'max:15']
                ]
            ])
            ->setQueryToEloquentClosures([
                'student_id' => function (&$eloquent, $query)
                {
                    $eloquent = $eloquent->where('student_id', $query['student_id']);
                }
            ]);

        parent::__construct();
    }

    public function storeAmountById(string $student_id): mixed
    {
        $data = $this->getDataFromRequest();
        $student = (new StudentAction())->getById($student_id);

        $newAmount = 0;

        if($data['amount'] > 0)
        {
            $newAmount = $data['amount'] + $student->wallet_amount;

            $data['action'] = "increase";
        }
        else
        {
            $newAmount = ($student->wallet_amount) - (abs($data['amount']));

            if($newAmount < 0)
            {
                throw new CustomException('the value you entered is greater than the current value', 30);
            }

            $data['action'] = "decrease";
        }

        $data['status'] = 'successful'; //this should change later
        $data['student_id'] = $student_id;

        $student->update([
            'wallet_amount' => $newAmount
        ]);

        return parent::store($data); // TODO: Change the autogenerated stub
    }
}
